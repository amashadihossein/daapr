[{"path":"https://amashadihossein.github.io/daapr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://amashadihossein.github.io/daapr/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://amashadihossein.github.io/daapr/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://amashadihossein.github.io/daapr/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://amashadihossein.github.io/daapr/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://amashadihossein.github.io/daapr/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://amashadihossein.github.io/daapr/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://amashadihossein.github.io/daapr/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://amashadihossein.github.io/daapr/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://amashadihossein.github.io/daapr/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://amashadihossein.github.io/daapr/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://amashadihossein.github.io/daapr/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://amashadihossein.github.io/daapr/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://amashadihossein.github.io/daapr/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://amashadihossein.github.io/daapr/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://amashadihossein.github.io/daapr/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://amashadihossein.github.io/daapr/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://amashadihossein.github.io/daapr/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://amashadihossein.github.io/daapr/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://amashadihossein.github.io/daapr/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://amashadihossein.github.io/daapr/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://amashadihossein.github.io/daapr/articles/daapr.html","id":"step-1-initialize-the-project","dir":"Articles","previous_headings":"","what":"Step 1: Initialize the project","title":"daapr: New project workflow","text":"new project, start initializing project using dpbuild::dp_init, following: Sets folder structure Sets git switch specified branch_name Sets renv capture package dependencies Sets daap configuration yaml file daap_config.yaml First, create new repository project name github provide repo url dp_init. example follows: NOTE: dp_init builds yaml config file, daap_config.yaml, configurations specified. Configuration includes key:value pairs well instructions function calls. example, two instructions two function calls provided. function call instructions can thought “dried” functions “hydrated” later executed: board_params_set_s3(board_alias = \"cars_board\", bucket_name = \"daap_bucket\", region = \"us-west-1\") creds_set_aws(key = Sys.getenv(\"AWS_KEY\"), secret = Sys.getenv(\"AWS_SECRET\") ) Note second function call relies “AWS_KEY” “AWS_SECRET” available environment function hydrated. pass keys secrets directly creds_set*. Instead, use environment variables password manager package keyring.","code":"library(daapr)  board_params_set_dried  <- fn_dry(board_params_set_s3(board_alias = \"cars_board\",                                                       bucket_name = \"daap_bucket\",                                                       region = \"us-west-1\"))  # Dry function call to setting credentials creds_set_dried <- fn_dry(creds_set_aws(key = Sys.getenv(\"AWS_KEY\"),                                          secret = Sys.getenv(\"AWS_SECRET\") ))  # Initialize dp repo dp_repo <- dp_init(project_path = \"dp_test1\",                    project_description = \"Test data product\",                    branch_name = \"us001\",                    branch_description = \"User story 1\",                    readme_general_note = \"This data object is generated for testing purposes\",                    board_params_set_dried = board_params_set_dried,                    creds_set_dried = creds_set_dried,                    github_repo_url = \"<GIT PATH/dp_test1.git>\")"},{"path":"https://amashadihossein.github.io/daapr/articles/daapr.html","id":"step-2-set-up-the-working-environment","dir":"Articles","previous_headings":"","what":"Step 2: Set up the working environment","title":"daapr: New project workflow","text":"initializing project, set working directory project directory: can double-check everything set correctly is_valid_dp_repository()","code":"setwd(dp_repo)"},{"path":"https://amashadihossein.github.io/daapr/articles/daapr.html","id":"add-starter-script","dir":"Articles","previous_headings":"Step 2: Set up the working environment","what":"Add starter script","title":"daapr: New project workflow","text":"step optional, highly recommended. starter code includes: dp_journal.RMD: dev journal help guide one document steps building data product dp_make.R: main workflow management script. Sourcing script build data product adding code, steps dp_journal.RMD walk add sync input data, build data product, deploy remote location.","code":"dpbuild::dpcode_add(project_path = dp_repo)"},{"path":"https://amashadihossein.github.io/daapr/articles/daapr.html","id":"step-3-add-input-data-and-sync-to-remote","dir":"Articles","previous_headings":"","what":"Step 3: Add input data and sync to remote","title":"daapr: New project workflow","text":"Goal: involves following steps dev journal source(\"dp_make.R\") step. goal step sync right subset () input data remote capture relevant metadata. example adding syncing data cars dataset, can upload data file(s) interest input_files folder long data tabular format.","code":"# Upload data into input_files folder readr::write_csv(x = cars, file = \"./input_files/cars.csv\")  # Map all input_files content and clean file labels in the map input_map <- dpinput_map(project_path = \".\") input_map <- inputmap_clean(input_map = input_map)  # Sync each input file to remote data repo config <- dpconf_get(project_path = \".\") synced_map <- dpinput_sync(conf = config, input_map = input_map, verbose = T)  # For each sync'd dataset, record info that will help you retrieve as needed dpinput_write(project_path = \".\", input_d = synced_map)"},{"path":"https://amashadihossein.github.io/daapr/articles/daapr.html","id":"step-4-build-the-data-product","dir":"Articles","previous_headings":"","what":"Step 4: Build the data product","title":"daapr: New project workflow","text":"main logic building data product per user story implemented functions defined within /R sub-directory project, well integration functions within dp_make.R workflow.","code":""},{"path":"https://amashadihossein.github.io/daapr/articles/daapr.html","id":"derive-new-features-as-needed","dir":"Articles","previous_headings":"Step 4: Build the data product","what":"Derive new features as needed","title":"daapr: New project workflow","text":"main logic data product implement data product built. example, let’s make new function derive_dist() want derive output distance meters. can make new file derive_dist.R R project directory. , can modify dp_make.R include derive function gets built data product: also need make sure derived data gets added dp_structure within dp_make.R: output can contain many datasets, structured desired form named list.","code":"derive_dist <- function(data_files_read, config) {      output <- data_files_read$cars(config = config) %>%      dplyr::mutate(dist_m = 0.3048 * dist)      return(output) } # Derive distance dist_m = derive_dist(data_files_read = data_files_read, config = config) # Structure data obj data_object = dp_structure(data_files_read = data_files_read,                             config = config,                             output = list(dist_m = dist_m),                             metadata = list())"},{"path":"https://amashadihossein.github.io/daapr/articles/daapr.html","id":"execute-dp_make-r","dir":"Articles","previous_headings":"Step 4: Build the data product","what":"Execute dp_make.R","title":"daapr: New project workflow","text":"satisfied changes needed derived features, execute workflow plan (included dp_journal.RMD) can check built data product inspecting rds object output_files folder continuing next steps. data testing implemented, test results can evaluated modifications code made needed.","code":"source(\"dp_make.R\")"},{"path":"https://amashadihossein.github.io/daapr/articles/daapr.html","id":"step-5-commit-and-push","dir":"Articles","previous_headings":"","what":"Step 5: Commit and push","title":"daapr: New project workflow","text":"data product meets expectations, can commit push code, providing commit message dp_commit. NOTE: push work: created empty repo git remote (e.g. github) Sys.getenv(\"GITHUB_PAT\") returns corresponding “GITHUB_PAT” complete one development cycle, making data product code ready deployment. NOTE: committing pushing can decoupled, just standard git workflow, add several different commits pushing.","code":"dpbuild::dp_commit(project_path = \".\", commit_description = \"First dp build: only input data\") dpbuild::dp_push(project_path = \".\")"},{"path":"https://amashadihossein.github.io/daapr/articles/daapr.html","id":"step-6-deploy","dir":"Articles","previous_headings":"","what":"Step 6: Deploy","title":"daapr: New project workflow","text":"Now data product ready deployed remote location one call dp_deploy:","code":"dpdeploy::dp_deploy()"},{"path":"https://amashadihossein.github.io/daapr/articles/daapr.html","id":"step-7-access-data-product","dir":"Articles","previous_headings":"","what":"Step 7: Access data product","title":"daapr: New project workflow","text":"Typical access pattern starts setting environment vars, brevity can just use existing config connect board, get data list else board.","code":"dp_connect(board_params = config$board_params, creds = config$creds)  dp <- dp_get(board_params = config$board_params, data_name = \"dp_test1\")  dp_list(board_params = config$board_params)"},{"path":"https://amashadihossein.github.io/daapr/articles/dp_merge.html","id":"goal","dir":"Articles","previous_headings":"","what":"Goal","title":"Combine two data products","text":"Combine two data products demonstrate workflow","code":""},{"path":"https://amashadihossein.github.io/daapr/articles/dp_merge.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"Combine two data products","text":"data product broader scope may encompass one data products. cases, data products can directly imported within data processing logic considered input_data.","code":""},{"path":"https://amashadihossein.github.io/daapr/articles/dp_merge.html","id":"user-story","dir":"Articles","previous_headings":"","what":"User Story","title":"Combine two data products","text":"need information derived encoded previously within dp_cars-us001 information within dp_mtcars-us001 (simply toy data product based mtcars dataset built).","code":""},{"path":"https://amashadihossein.github.io/daapr/articles/dp_merge.html","id":"step-1-initialize-the-project","dir":"Articles","previous_headings":"","what":"Step 1: Initialize the project","title":"Combine two data products","text":"new project, initialize project using dpbuild::dp_init. See vignette new project workflow details initialization .","code":"library(daapr)  board_params_set_dried  <- fn_dry(board_params_set_s3(board_alias = \"<ALIAS>\",                                                       bucket_name = \"<BUCKET>\",                                                       region = \"<REIGION>\"))  # Dry function call to setting credentials creds_set_dried <- fn_dry(creds_set_aws(key = Sys.getenv(\"AWS_KEY\"),                                         secret = Sys.getenv(\"AWS_SECRET\") ))  # Initialize dp repo dp_repo <- dp_init(project_path = \"dp_xcars\",                    project_description = \"Cars and mtcars combined data product\",                    branch_name = \"us001\",                    branch_description = \"User story 1\",                    readme_general_note = \"Data product combining cars and metcars\",                    board_params_set_dried = board_params_set_dried,                    creds_set_dried = creds_set_dried)"},{"path":"https://amashadihossein.github.io/daapr/articles/dp_merge.html","id":"step-2-set-up-the-working-environment","dir":"Articles","previous_headings":"","what":"Step 2: Set up the working environment","title":"Combine two data products","text":"point project basic components provide sandbox can development. necessary, may instructional clean restart R session next step. , activate set sandbox project.","code":"setwd(dp_repo)  # only necessary if you re-started your R session if(!\"daapr\" %in% (.packages()))   library(\"daapr\")  # Set up \"promised\" env variables Sys.setenv(\"AWS_KEY\" = \"<BUCKETS AWS KEY>\") Sys.setenv(\"AWS_SECRET\" = \"<BUCKETS AWS SECRET>\")  # Retrieve configuration config <- dpconf_get(project_path = \".\")  # Set up remote git env variable so you can directly push your code to git  # remote. This will only be used when you are pushing the code, but we can set  # it now as we are setting up our working env. If you don't want to deal with # this you can skip this. You can still go quite far in the workflow Sys.setenv(\"GITHUB_PAT\" = \"<YOUR GITHUB PAT>\")"},{"path":"https://amashadihossein.github.io/daapr/articles/dp_merge.html","id":"step-3-build-the-data-product","dir":"Articles","previous_headings":"","what":"Step 3: Build the data product","title":"Combine two data products","text":"main logic data product implement data product built. Note, additional data needed included data product, mapped synced done building dp_cars, prior build dp_xcars logic.","code":"dp_connect(board_params = config$board_params, creds = config$creds)  # specify which versions of data products to use version1 = \"<version1>\" version2 = \"<version2>\" dp_cars <- dp_get(board_params = config$board_params,                   data_name = \"dp-cars-us001\", version = version1)  dp_mtcars <- dp_get(board_params = config$board_params,                   data_name = \"dp-mtcars-us001\", version = version2)  # build input data by converting input data products to links input = list(dp_cars = dp_tolink(data_name = \"dp-cars-us001\",                                  data_version = version1),              dp_mtcars = dp_tolink(data_name = \"dp-mtcars-us001\",                                    data_version = version2))  # build your output data output <- list(cars = dp_cars$input$cars, mt_cars = dp_mtcars$input$mtcars)  # Structure the input, output, metadata ... you wish to have in your data product data_object <- dp_structure(data_files_read = input,                             output = output, config = config)  # save and log the data product built dp_write(data_object = data_object, project_path = \".\")"},{"path":"https://amashadihossein.github.io/daapr/articles/dp_merge.html","id":"step-5-commit-and-push","dir":"Articles","previous_headings":"","what":"Step 5: Commit and push","title":"Combine two data products","text":"point, can commit push code. NOTE: push work created empty repo git remote (e.g. github) Sys.getenv(\"GITHUB_PAT\") returns corresponding “GITHUB_PAT”","code":"dp_commit(project_path = \".\", commit_description = \"First dp build\") dp_push(project_path = \".\")"},{"path":"https://amashadihossein.github.io/daapr/articles/dp_merge.html","id":"step-6-deploy","dir":"Articles","previous_headings":"","what":"Step 6: Deploy","title":"Combine two data products","text":"Deploy merged data product:","code":"dp_deploy()"},{"path":"https://amashadihossein.github.io/daapr/articles/dp_merge.html","id":"step-7-data-access","dir":"Articles","previous_headings":"","what":"Step 7: Data access","title":"Combine two data products","text":"Typical access pattern starts setting env vars, brevity can just use existing config connect board, get data list else board.","code":"dp_connect(board_params = config$board_params, creds = config$creds)  dp <- dp_get(board_params = config$board_params, data_name = \"dp-xcars-us001\")  dp_list(board_params = config$board_params)"},{"path":"https://amashadihossein.github.io/daapr/articles/dp_update.html","id":"goal","dir":"Articles","previous_headings":"","what":"Goal:","title":"Update build logic","text":"Document workflow updating data processing logic. , simplicity input data remains unchanged.","code":""},{"path":"https://amashadihossein.github.io/daapr/articles/dp_update.html","id":"user-story","dir":"Articles","previous_headings":"","what":"User story","title":"Update build logic","text":"interested updating previously built data product dp-cars-us001 provides distances cars dataset cm. See minimalist example","code":""},{"path":"https://amashadihossein.github.io/daapr/articles/dp_update.html","id":"step-1-clone-the-existing-dp_cars-project-set-env-and-activate","dir":"Articles","previous_headings":"","what":"Step 1 Clone the existing dp_cars project, set env and activate","title":"Update build logic","text":"Clone existing data product wish modify. Navigate directory wish put project folder provide GITHUB_PAT environment shown .","code":"# Set up \"promised\" env variables Sys.setenv(\"AWS_KEY\" = \"<BUCKETS AWS KEY>\") Sys.setenv(\"AWS_SECRET\" = \"<BUCKETS AWS SECRET>\") Sys.setenv(\"GITHUB_PAT\" = \"<YOUR GITHUB_PAT>\")  dp_clone(remote_url = \"<GIT PATH/dp_cars.git>\", branch = \"us001\") renv::activate(project = \"./dp_cars/\") renv::restore() # Check if the project is set up correctly is_valid_dp_repository()  library(daapr) # get config config <- dpconf_get(project_path = \".\")"},{"path":"https://amashadihossein.github.io/daapr/articles/dp_update.html","id":"step-2-modify-dp_make-r","dir":"Articles","previous_headings":"","what":"Step 2 Modify dp_make.R","title":"Update build logic","text":"Open dp_make.R edit add single line dplyr::mutate(dist_cm = 100 *  dist_m) shown :","code":"# read in the input data from what is recorded by dpinput_write data_files_read <- dpinput_read()  # build your ouput data output <- data_files_read$cars(config = config) %>%    dplyr::mutate(dist_m = 0.3048 * dist) %>%   dplyr::mutate(dist_cm = 100 *  dist_m)  # Structure the input, output, metadata ... you wish to have in your data product data_object <- dp_structure(data_files_read = data_files_read,                             output = output, config = config)  # save and log the data product built dp_write(data_object = data_object, project_path = \".\")"},{"path":"https://amashadihossein.github.io/daapr/articles/dp_update.html","id":"step-4-build-and-evaluate","dir":"Articles","previous_headings":"","what":"Step 4 Build and evaluate","title":"Update build logic","text":"simply source edited dp_make.R given simplicity evaluation simply confirming data_object anticipated can check updated data product inspecting rds object output_files folder continuing next steps.","code":"source(\"./dp_make.R\")"},{"path":"https://amashadihossein.github.io/daapr/articles/dp_update.html","id":"step-5-commit-and-push","dir":"Articles","previous_headings":"","what":"Step 5 Commit and push","title":"Update build logic","text":"Commit changes push modified dp_cars remote git repo","code":"dp_commit(project_path = \".\", commit_description = \"Added cm feature\") dp_push(project_path = \".\")"},{"path":"https://amashadihossein.github.io/daapr/articles/dp_update.html","id":"step-6-deploy","dir":"Articles","previous_headings":"","what":"Step 6 Deploy","title":"Update build logic","text":"Deploy data product:","code":"dp_deploy()"},{"path":"https://amashadihossein.github.io/daapr/articles/dp_update.html","id":"step-7-data-access-optional","dir":"Articles","previous_headings":"","what":"Step 7: Data access (optional)","title":"Update build logic","text":"wanted access remote resource, can simply connect pull data.","code":"dp_connect(board_params = config$board_params, creds = config$creds)  dp <- dp_get(board_params = config$board_params, data_name = \"dp-cars-us001\")  dp_list(board_params = config$board_params)"},{"path":"https://amashadihossein.github.io/daapr/articles/faq.html","id":"what-file-types-are-accepted","dir":"Articles","previous_headings":"","what":"What file types are accepted?","title":"Frequently Asked Questions","text":"standard flat tabular data format can added input_files adding data. includes .csv, .tsv, .xlsx, .rds, .sas7bdat files. Data can also provided zipped format, dpinput_map unzip files .","code":""},{"path":"https://amashadihossein.github.io/daapr/articles/faq.html","id":"should-i-use-targets-with-dpcode_add","dir":"Articles","previous_headings":"","what":"Should I use targets with dpcode_add()?","title":"Frequently Asked Questions","text":"Since version 0.0.0.9014, dpbuild::dpcode_add() parameter use_targets (default FALSE) user can specify whether use targets instead drake building data product targets. Since drake superceded, recommend using targets specifying dpbuild::dpcode_add(use_targets = TRUE) starting new projects. existing project uses drake ’d like switch using targets, can use dpcode_add() get relevant targets template files, delete rename existing dp_make.R dp_journal.Rmd files first.","code":""},{"path":"https://amashadihossein.github.io/daapr/articles/faq.html","id":"what-if-sourcing-dp_make-r-doesnt-find-my-new-input-data","dir":"Articles","previous_headings":"","what":"What if sourcing dp_make.R doesn’t find my new input data?","title":"Frequently Asked Questions","text":"project uses drake (can check looking .drake folder project repository), may need manually clear cache update input data. can running drake::clean() sourcing dp_make.R.","code":""},{"path":"https://amashadihossein.github.io/daapr/articles/input_data_update.html","id":"goal","dir":"Articles","previous_headings":"","what":"Goal:","title":"Update input data","text":"Update input_data content data product","code":""},{"path":"https://amashadihossein.github.io/daapr/articles/input_data_update.html","id":"user-story","dir":"Articles","previous_headings":"","what":"User story","title":"Update input data","text":"like update cars data product built minimalist example , excluding last 5 rows learned issues records.","code":""},{"path":"https://amashadihossein.github.io/daapr/articles/input_data_update.html","id":"step-1-navigate-to-dp_cars-project","dir":"Articles","previous_headings":"","what":"Step 1: Navigate to dp_cars project","title":"Update input data","text":"NOTE: don’t project, can clone using dpbuild::dp_clone(). See details dp update vignette. Make sure folder input_files project directory location depositing data","code":""},{"path":"https://amashadihossein.github.io/daapr/articles/input_data_update.html","id":"step-2-set-the-working-environment","dir":"Articles","previous_headings":"","what":"Step 2: Set the working environment","title":"Update input data","text":"point, project basic components provide sandbox can development. Re-activate restart sandbox project.","code":"# Activate the repo and switch directory renv::activate(project = \"./dp_cars/\") renv::restore() # Check if the project is set up correctly is_valid_dp_repository()  # only necessary if you re-started your R session if(!\"daapr\" %in% (.packages()))   library(\"daapr\")  # Set up \"promised\" env variables for remote data repository Sys.setenv(\"AWS_KEY\" = \"<BUCKETS AWS KEY>\") Sys.setenv(\"AWS_SECRET\" = \"<BUCKETS AWS SECRET>\")  # Set up env variables for remote code repository Sys.setenv(\"GITHUB_PAT\" = \"<YOUR GITHUB PAT>\")  # Retrieve configuration config <- dpconf_get(project_path = \".\")"},{"path":"https://amashadihossein.github.io/daapr/articles/input_data_update.html","id":"step-3-read-updated-input-data-sync-to-remote-and-record","dir":"Articles","previous_headings":"","what":"Step 3: Read updated input data, sync to remote and record","title":"Update input data","text":"step, go whatever content input_files folder metadata representation read datasets. Given goal update cars.csv, re-upload corrected data first. Examine input_map. contains newly uploaded data, also brings along last input_data previous records (.e. cars data 50 rows). goal replace old cars table new one (.e one contains 1st 45 rows), can remove old record cleaning names. case, data removed id “cars”. NOTE: sure one new one old cars table, may instructive inspect datasets. Remember, datasets already synced read records accessible via anonymous function call require config parameters. Ex: input_map$input_obj$cars(config = config)","code":"# Upload data into input_files folder readr::write_csv(x = cars[1:45,], file = \"./input_files/cars.csv\")  # Map all input_files content and optionally clean file labels in the map input_map <- dpinput_map(project_path = \".\") input_map <- inputmap_clean(input_map = input_map, remove_id = \"cars\")  # Sync each read files to remote data repo synced_map <- dpinput_sync(conf = config, input_map = input_map, verbose = T)  # For each sync'd dataset, record info that will help you retrieve as needed dpinput_write(project_path = \".\", input_d = synced_map)"},{"path":"https://amashadihossein.github.io/daapr/articles/input_data_update.html","id":"step-4-build-the-data-product","dir":"Articles","previous_headings":"","what":"Step 4: Build the data product","title":"Update input data","text":"main logic data product implemented data product built. step, can simply re-run dp_make.R, re-build data product updated input data.","code":"source(\"dp_make.R\")"},{"path":"https://amashadihossein.github.io/daapr/articles/input_data_update.html","id":"step-5-commit-and-push","dir":"Articles","previous_headings":"","what":"Step 5: Commit and push","title":"Update input data","text":"point, can commit push code.","code":"dp_commit(project_path = \".\",            commit_description = \"Updated input cars, dropping the last 5 rows\") dp_push(project_path = \".\")"},{"path":"https://amashadihossein.github.io/daapr/articles/min_workflow_local.html","id":"goal","dir":"Articles","previous_headings":"","what":"Goal:","title":"A minimalist example with local data","text":"Build, deploy access (n overly) simple data product locally get familiarized concepts functions. method applicable building data products locally mounted drives.","code":""},{"path":"https://amashadihossein.github.io/daapr/articles/min_workflow_local.html","id":"user-story","dir":"Articles","previous_headings":"","what":"User story","title":"A minimalist example with local data","text":"interested data product simply provides distances cars dataset metric unit. See ?cars additional detail dataset.","code":""},{"path":"https://amashadihossein.github.io/daapr/articles/min_workflow_local.html","id":"step-1-initialize-the-project","dir":"Articles","previous_headings":"","what":"Step 1: Initialize the project","title":"A minimalist example with local data","text":"new project, initialize project using dpbuild::dp_init. See getting started vignette details initialization .","code":"library(daapr)  # Dry function call to set board location and name board_params_set_dried <- fn_dry(board_params_set_local(board_alias = \"<ALIAS>\",                                                         folder = \"<FOLDER_PATH>\"))  # Initialize dp repo dp_repo <- dp_init(project_path = \"dp_cars\",                    project_description = \"Cars data product\",                    branch_name = \"us001\",                    branch_description = \"User story 1\",                    readme_general_note = \"Data product to explore cars stopping distance\",                    board_params_set_dried = board_params_set_dried,                    github_repo_url = \"<GIT PATH/dp_cars.git>\")"},{"path":"https://amashadihossein.github.io/daapr/articles/min_workflow_local.html","id":"step-2-set-up-the-working-environment","dir":"Articles","previous_headings":"","what":"Step 2: Set up the working environment","title":"A minimalist example with local data","text":"point project basic components provide sandbox can development. necessary, may instructional clean restart R session next step. , activate set sandbox project.","code":"# Switch to project directory setwd(dp_repo)  # only necessary if you re-started your R session if(!\"daapr\" %in% (.packages()))   library(\"daapr\")  # Set up env variables for remote code repository Sys.setenv(\"GITHUB_PAT\" = \"<YOUR GITHUB PAT>\")  # Retrieve configuration config <- dpconf_get(project_path = \".\")"},{"path":"https://amashadihossein.github.io/daapr/articles/min_workflow_local.html","id":"step-3-add-input-data-and-sync-to-remote","dir":"Articles","previous_headings":"","what":"Step 3: Add input data and sync to remote","title":"A minimalist example with local data","text":"step go whatever content input_files folder metadata representation read datasets. one dataset: cars.csv","code":"# Upload data into input_files folder readr::write_csv(x = cars, file = \"./input_files/cars.csv\")  # Map all input_files content and optionally clean file labels in the map input_map <- dpinput_map(project_path = \".\") input_map <- inputmap_clean(input_map = input_map)  # Sync each read files to remote data repo synced_map <- dpinput_sync(conf = config, input_map = input_map, verbose = T)  # For each sync'd dataset, record info that will help you retrieve as needed dpinput_write(project_path = \".\", input_d = synced_map)"},{"path":"https://amashadihossein.github.io/daapr/articles/min_workflow_local.html","id":"step-4-build-the-data-product","dir":"Articles","previous_headings":"","what":"Step 4: Build the data product","title":"A minimalist example with local data","text":"main logic data product implement data product built. many steps chunk main logic? pay done : built portable recipe metadata, package dependencies, data logic code! Now, simply saving chunk R-script, let’s say named dp_make.R, can reproduced configurations recorded without provide input data. Everything now code can tracked git. make project reproducible save chunk dp_make.R main directory. Sourcing file closing needed reproduce data product.","code":"# read in the input data from what is recorded by dpinput_write data_files_read <- dpinput_read()  # build your output data output <- data_files_read$cars(config = config) %>%    dplyr::mutate(dist_m = 0.3048 * dist)  # Structure the input, output, metadata ... you wish to have in your data product data_object <- dp_structure(data_files_read = data_files_read,                             output = output, config = config) # save and log the data product built dp_write(data_object = data_object, project_path = \".\")"},{"path":"https://amashadihossein.github.io/daapr/articles/min_workflow_local.html","id":"step-5-commit-and-push","dir":"Articles","previous_headings":"","what":"Step 5: Commit and push","title":"A minimalist example with local data","text":"point, can commit push code. NOTE: push work created empty repo git remote (e.g. github) Sys.getenv(\"GITHUB_PAT\") returns corresponding “GITHUB_PAT”","code":"dp_commit(project_path = \".\", commit_description = \"First dp build\") dp_push(project_path = \".\")"},{"path":"https://amashadihossein.github.io/daapr/articles/min_workflow_local.html","id":"step-6-deploy","dir":"Articles","previous_headings":"","what":"Step 6: Deploy","title":"A minimalist example with local data","text":"Deploy data product specified location:","code":"# Deploy data product to local board dp_deploy()"},{"path":"https://amashadihossein.github.io/daapr/articles/min_workflow_local.html","id":"step-7-data-access","dir":"Articles","previous_headings":"","what":"Step 7: Data access","title":"A minimalist example with local data","text":"Typical access pattern starts setting env vars, brevity can just use existing config connect board, get data list else board.","code":"dp_connect(board_params = config$board_params, creds = config$creds)  dp <- dp_get(board_params = config$board_params, data_name = \"dp-cars-us001\")  dp_list(board_params = config$board_params)"},{"path":"https://amashadihossein.github.io/daapr/articles/min_wrkfl.html","id":"goal","dir":"Articles","previous_headings":"","what":"Goal:","title":"A minimalist example","text":"Build, deploy access (n overly) simple data product get familiarized concepts functions.","code":""},{"path":"https://amashadihossein.github.io/daapr/articles/min_wrkfl.html","id":"user-story","dir":"Articles","previous_headings":"","what":"User story","title":"A minimalist example","text":"interested data product simply provides distances cars dataset metric unit. See ?cars additional detail dataset.","code":""},{"path":"https://amashadihossein.github.io/daapr/articles/min_wrkfl.html","id":"step-1-initialize-the-project","dir":"Articles","previous_headings":"","what":"Step 1: Initialize the project","title":"A minimalist example","text":"new project, initialize project using dpbuild::dp_init. See getting started vignette details initialization .","code":"library(daapr)  board_params_set_dried  <- fn_dry(board_params_set_s3(board_alias = \"<ALIAS>\",                                                       bucket_name = \"<BUCKET>\",                                                       region = \"<REIGION>\"))  # Dry function call to setting credentials creds_set_dried <- fn_dry(creds_set_aws(key = Sys.getenv(\"AWS_KEY\"),                                         secret = Sys.getenv(\"AWS_SECRET\") ))  # Initialize dp repo dp_repo <- dp_init(project_path = \"dp_cars\",                    project_description = \"Cars data product\",                    branch_name = \"us001\",                    branch_description = \"User story 1\",                    readme_general_note = \"Data product to explore cars stopping distance\",                    board_params_set_dried = board_params_set_dried,                    creds_set_dried = creds_set_dried,                    github_repo_url = \"<GIT PATH/dp_cars.git>\")"},{"path":"https://amashadihossein.github.io/daapr/articles/min_wrkfl.html","id":"step-2-set-up-the-working-environment","dir":"Articles","previous_headings":"","what":"Step 2: Set up the working environment","title":"A minimalist example","text":"point project basic components provide sandbox can development. necessary, may instructional clean restart R session next step. , activate set sandbox project.","code":"# Switch to project directory setwd(dp_repo)  # only necessary if you re-started your R session if(!\"daapr\" %in% (.packages()))   library(\"daapr\")  # Set up \"promised\" env variables for remote data repository Sys.setenv(\"AWS_KEY\" = \"<BUCKETS AWS KEY>\") Sys.setenv(\"AWS_SECRET\" = \"<BUCKETS AWS SECRET>\")  # Set up env variables for remote code repository Sys.setenv(\"GITHUB_PAT\" = \"<YOUR GITHUB PAT>\")  # Retrieve configuration config <- dpconf_get(project_path = \".\")"},{"path":"https://amashadihossein.github.io/daapr/articles/min_wrkfl.html","id":"step-3-add-input-data-and-sync-to-remote","dir":"Articles","previous_headings":"","what":"Step 3: Add input data and sync to remote","title":"A minimalist example","text":"step go whatever content input_files folder metadata representation read datasets. one dataset: cars.csv","code":"# Upload data into input_files folder readr::write_csv(x = cars, file = \"./input_files/cars.csv\")  # Map all input_files content and clean file labels in the map input_map <- dpinput_map(project_path = \".\") input_map <- inputmap_clean(input_map = input_map)  # Sync each read files to remote data repo synced_map <- dpinput_sync(conf = config, input_map = input_map, verbose = T)  # For each sync'd dataset, record info that will help you retrieve as needed dpinput_write(project_path = \".\", input_d = synced_map)"},{"path":"https://amashadihossein.github.io/daapr/articles/min_wrkfl.html","id":"step-4-build-the-data-product","dir":"Articles","previous_headings":"","what":"Step 4: Build the data product","title":"A minimalist example","text":"main logic data product implement data product built. many steps chunk main logic? pay done : built portable recipe metadata, package dependencies, data logic code! Now, simply saving chunk R-script, let’s say named dp_make.R, can reproduced configurations recorded without provide input data. Everything now code can tracked git. make project reproducible save chunk dp_make.R main directory. Sourcing file closing needed reproduce data product.","code":"# read in the input data from what is recorded by dpinput_write data_files_read <- dpinput_read()  # build your output data output <- data_files_read$cars(config = config) %>%    dplyr::mutate(dist_m = 0.3048 * dist)  # Structure the input, output, metadata ... you wish to have in your data product data_object <- dp_structure(data_files_read = data_files_read,                             output = output, config = config) # save and log the data product built dp_write(data_object = data_object, project_path = \".\")"},{"path":"https://amashadihossein.github.io/daapr/articles/min_wrkfl.html","id":"step-5-commit-and-push","dir":"Articles","previous_headings":"","what":"Step 5: Commit and push","title":"A minimalist example","text":"point, can commit push code. NOTE: push work created empty repo git remote (e.g. github) Sys.getenv(\"GITHUB_PAT\") returns corresponding “GITHUB_PAT”","code":"dp_commit(project_path = \".\", commit_description = \"First dp build\") dp_push(project_path = \".\")"},{"path":"https://amashadihossein.github.io/daapr/articles/min_wrkfl.html","id":"step-6-deploy","dir":"Articles","previous_headings":"","what":"Step 6: Deploy","title":"A minimalist example","text":"Deploy data product:","code":"dp_deploy()"},{"path":"https://amashadihossein.github.io/daapr/articles/min_wrkfl.html","id":"step-7-data-access","dir":"Articles","previous_headings":"","what":"Step 7: Data access","title":"A minimalist example","text":"Typical access pattern starts setting env vars, brevity can just use existing config connect board, get data list else board.","code":"dp_connect(board_params = config$board_params, creds = config$creds)  dp <- dp_get(board_params = config$board_params, data_name = \"dp-cars-us001\")  dp_list(board_params = config$board_params)"},{"path":"https://amashadihossein.github.io/daapr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Afshin Mashadi-Hossein. Author, maintainer. Clara Amorosi. Author.","code":""},{"path":"https://amashadihossein.github.io/daapr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mashadi-Hossein , Amorosi C (2022). daapr: Toolset implemeting framework Data---Product. R package version 0.0.0.9005.","code":"@Manual{,   title = {daapr: Toolset for implemeting the framework of Data-as-a-Product},   author = {Afshin Mashadi-Hossein and Clara Amorosi},   year = {2022},   note = {R package version 0.0.0.9005}, }"},{"path":"https://amashadihossein.github.io/daapr/index.html","id":"daapr-","dir":"","previous_headings":"","what":"Toolset for implemeting the framework of Data-as-a-Product","title":"Toolset for implemeting the framework of Data-as-a-Product","text":"goal daapr conveniently provide main packages used implementing framework Data---Product (DaaP).","code":""},{"path":"https://amashadihossein.github.io/daapr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Toolset for implemeting the framework of Data-as-a-Product","text":"Read section carefully! daapr installs core packages DaaP framework, dpbuild, dpdeploy dpi, along custom version pins package. Note: currently daapr uses custom version pins package. change future stay sync latest pins. However, point, important remove existing packages start fresh pull repo. released version dev version","code":"# Remove previously installed core daapr packages and update remove.packages(intersect(rownames(installed.packages()),                            c(\"pins\",\"dpi\",\"dpbuild\",\"dpdeploy\",\"daapr\"))) remotes::install_github(repo = \"amashadihossein/daapr\") remotes::install_github(repo = \"amashadihossein/daapr\", ref = \"dev\")"},{"path":"https://amashadihossein.github.io/daapr/reference/daapr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"daapr: Toolset for implemeting the framework of Data-as-a-Product — daapr-package","title":"daapr: Toolset for implemeting the framework of Data-as-a-Product — daapr-package","text":"Collection packages build manage data products.","code":""},{"path":[]},{"path":"https://amashadihossein.github.io/daapr/reference/daapr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"daapr: Toolset for implemeting the framework of Data-as-a-Product — daapr-package","text":"Maintainer: Afshin Mashadi-Hossein afshin.mashadi-hossein@bms.com (ORCID) Authors: Clara Amorosi (ORCID)","code":""}]
